# Python standard library
from os.path import join
import os, sys

# Local imports
from scripts.common import (
    allocated,
    provided, 
    references,
    str_bool,
    depending
)

# Global workflow variables
configfile: 'config.json'                      # Generated from user input and config/*.json
workpath = config['project']['workpath']       # Pipeline's output directory
tmpdir   = config['options']['tmp_dir']        # Temporary directory
samples2barcodes = config['barcodes']          # Samples to demultiplex, `cat` together
genome = config['options']['genome']           # Reference genome of a set of samples

# Build targets for ref genome 
# download step from GENCODE,
# files are gzipped; however
# final targets are not
resolve_ref = lambda f: f.split('/')[-1].rstrip('.gz') \
    if f.startswith('http') else f
ref_genome = resolve_ref(  
    config['references'][genome]['GENOME_FA']
) # Genomic FASTA file
ref_transcripts = resolve_ref(
    config['references'][genome]['TRANSCRIPTS_FA']
) # Transcriptomic FASTA file
ref_gtf = resolve_ref(
    config['references'][genome]['GTF_FILE']
) # GTF File

# Find list of sample which 
# have mulitple barcodes, this 
# means they need to be merged  
barcoded_samples = [k for k in samples2barcodes if samples2barcodes[k]]
samples = list(config['barcodes'].keys())
groups = [config['sample2group'][s] for s in samples]
# Get hash for the list of samples
# belonging to a given fast5 path,
# pycoQC takes a fast5 path as input,
# to create a summary file; however,
# it is possible that multiple samples
# can be in the same fast5 path. Using
# a hash that is unique to the list of 
# samples belonging to a given fast5
# path ensures no collisions occur.
fast5_to_hash = config['fast5_hashes']
f5_hashes = list(fast5_to_hash.values())
hash_to_fast5 = {
    h:f5 for f5,h in fast5_to_hash.items()
}

# Nanofilt read average quality score filter
quality_filter = int(
    config['options']['quality_filter']
) # Default: 8

# Determines if Conda or Singularity
# are used for software dependencies
use_singularity = True
use_conda =  str_bool(
     config['options']['use_conda']
) # default: False
# Use Singularity
if use_conda:
    # Conda and Singularity 
    # are mutually exclusive 
    use_singularity = False

# Read in resource information,
# containing information about 
# threads, mem, walltimes, etc.
# TODO: Add handler for when the
# mode is set to local.
with open(join('config', 'cluster.json')) as fh:
    cluster = json.load(fh)

# Final output files of the pipeline,
# Rule DAG built from listed here 
rule all:
    input:
        # Download reference files from GENOCDE,
        # PRI GENOMIC FA, TRANSCRIPTS FA, PRI GTF
        # @imported from `rules download_*` in rules/download.smk
        join(workpath, "refs", ref_genome),
        join(workpath, "refs", ref_transcripts),
        join(workpath, "refs", ref_gtf),
        # DInoPORE I-to-A RNA-editing rule
        # Create a sequence dictionary for sam2tsv
        # and create an index for the FASTA file
        # @imported from `rule dinopore_fadict` in rules/editing_a-to-i.smk
        join(workpath, "refs", "{0}.dict".format(ref_genome)),
        join(workpath, "refs", "{0}.fai".format(ref_genome)),
        # pycoQC sequencing QC report
        # @imported from `rule pycoqc_*` in rules/qc.smk
        #expand(
        #    join(workpath, "reports", "pycoQC", "{samples_hash}", "pycoQC_report.html"),
        #    samples_hash=f5_hashes
        #),
        # Merge samples with multiple barcodes,
        # @imported from `rule setup` in rules/trim.smk 
        expand(
            join(workpath, "{name}", "fastqs", "{name}.fastq.gz"), 
            name=samples
        ),
        # Base-calling quality filtering,
        # @imported from `rule nanofilt` in rules/trim.smk 
        expand(
            join(workpath, "{name}", "fastqs", "{name}.filtered.fastq.gz"),
            name=samples
        ),
        # FastQC report on raw data
        # @imported from `rule fastqc_raw` in rules/qc.smk
        expand(
            join(workpath, "{name}", "fastqc", "{name}_fastqc.html"),
            name=samples
        ),
        # FastQC report on quality filtered data
        # @imported from `rule fastqc_filtered` in rules/qc.smk
        expand(
            join(workpath, "{name}", "fastqc", "{name}.filtered_fastqc.html"),
            name=samples
        ),
        # Align to genome and transcriptome
        # @imported from `rules minimap2_*` in rules/map.smk
        expand(
            join(workpath, "{name}", "bams", "{name}.sorted.genome.bam"),
            name=samples
        ),
        expand(
            join(workpath, "{name}", "bams", "{name}.sorted.transcriptome.bam"),
            name=samples
        ),
        # Normalized (CPM) BigWig tracks
        # for the fwd and rev strand 
        # @imported from `rules stranded_bigwigs` in rules/map.smk
        expand(
            join(workpath, "{name}", "bigwigs", "{name}.cpm.fwd.bw"),
            name=samples
        ),
        # Nanoplot to visualize alignment QC
        # @imported from `rule nanoplot` in rules/qc.smk
        expand(
            join(workpath, "{name}", "nanoplot", "NanoPlot-report.html"),
            name=samples
        ),
        # NanoStat to gather BAM statistics
        # @imported from `rule nanostat` in rules/qc.smk
        expand(
            join(workpath, "{name}", "bams", "{name}.sorted.genome.metrics"),
            name=samples
        ),
        # NanoCount to quantify isoform counts
        # @imported from `rule nanocount` in rules/quant.smk
        expand(
            join(workpath, "{name}", "counts", "{name}.nanocount.transcripts.tsv"),
            name=samples
        ),
        # NanoCount to quantify isoform counts
        # @imported from `rule nanocount` in rules/quant.smk
        join(workpath, "project", "counts", "known", "nanocount.transcripts.counts.tsv"),
        join(workpath, "project", "counts", "known", "nanocount.transcripts.tpm.tsv"),
        # DInoPORE I-to-A RNA-editing rule
        # Align to reference genome with Graphmap2
        # @imported from `rule dinopore_graphmap2` in rules/editing_a-to-i.smk
        expand(
            join(workpath, "{name}", "rna-editing", "dinopore", "{name}.sorted.bam"), 
            name=samples
        ),
        # DInoPORE I-to-A RNA-editing rule
        # Align nanopore event signals to ref k-mers
        # @imported from `rule dinopore_nanopolish` in rules/editing_a-to-i.smk
        expand(
            join(workpath, "{name}", "rna-editing", "dinopore", "{name}.nanopolish.eventAlignOut.txt"), 
            name=samples
        ),
        # DInoPORE I-to-A RNA-editing rule
        # Convert SAM to filtered TSV file 
        # @imported from `rule dinopore_sam2tsv` in rules/editing_a-to-i.smk
        expand(
            join(workpath, "{name}", "rna-editing", "dinopore", "{name}.raw_features.tsv"),
            name=samples
        ),
        # DInoPORE I-to-A RNA-editing rule
        # Combine nanopolish event-level signal 
        # @imported from `rule dinopore_combine_events` in rules/editing_a-to-i.smk
        expand(
            join(workpath, "{name}", "rna-editing", "dinopore", "{name}.nanopolish.eventAlignOut.combined.txt"),
            name=samples
        ),
        # DInoPORE I-to-A RNA-editing rule
        # Generate raw feature table
        # @imported from `rule dinopore_feature_table` in rules/editing_a-to-i.smk
        expand(
            join(workpath, "project", "rna-editing", "dinopore", "{name}.sam2tsv_nanopolish_grp_{group}.txt"),
            zip,
            name=samples,
            group=groups
        ),
        # DInoPORE I-to-A RNA-editing rule
        # Generate group aggregated feature table
        # @imported from `rule dinopore_feature_table` in rules/editing_a-to-i.smk
        expand(
            join(workpath, "project", "rna-editing", "dinopore", "{group}.aggr.10bin.inML.txt"),
            group=groups
        ),
        # DInoPORE I-to-A RNA-editing rule
        # Pre-processing aggreagated feature table
        # to create input for CNN/regression model
        # @imported from `rule dinopore_transform` in rules/editing_a-to-i.smk
        expand(
            join(workpath, "project", "rna-editing", "dinopore", "{group}.input_CNN_regression_modelgen.RData"),
            group=groups
        ),
        # DInoPORE I-to-A RNA-editing rule
        # Predict A-to-I RNA-editing rate
        # @imported from `rule dinopore_predict` in rules/editing_a-to-i.smk
        expand(
            join(workpath, "project", "rna-editing", "dinopore", "{group}.output_prediction_CNN_class0.txt"),            group=groups
        ),
        # FLAIR Correct, known/novel isoform quantification
        # @imported from `rule flair_correct` in rules/quant.smk
        expand(
            join(workpath, "{name}", "bams", "{name}_all_corrected.bed"),
            name=samples,
        ),
        # FLAIR Collapse, known/novel isoform quantification
        # @imported from `rule flair_collapse` in rules/quant.smk
        expand(
            join(workpath, "project", "counts", "novel", "flair.isoforms.fa"),
            name=samples,
        ),
        # FLAIR Quantify, known/novel isoform quantification
        # @imported from `rule flair_quantify` in rules/quant.smk
        expand(
            join(workpath, "project", "counts", "novel", "flair.counts_matrix.tsv"),
            name=samples,
        ),
        # MultiQC to aggregate results into a report
        # @imported from `rule multiqc` in rules/qc.smk
        join(workpath, "reports", "multiqc_report.html"),


# Import rules 
include: join("rules", "common.smk")
include: join("rules", "download.smk")
include: join("rules", "trim.smk")
include: join("rules", "qc.smk")
include: join("rules", "map.smk")
include: join("rules", "quant.smk")
include: join("rules", "editing_a-to-i.smk")
