# Python standard library
from os.path import join
import os, sys

# Local imports
from scripts.common import (
    allocated,
    provided, 
    references,
    str_bool,
    depending
)

# Global workflow variables
configfile: 'config.json'                      # Generated from user input and config/*.json
workpath = config['project']['workpath']       # Pipeline's output directory
tmpdir   = config['options']['tmp_dir']        # Temporary directory
samples2barcodes = config['barcodes']          # Samples to demultiplex, `cat` together
genome = 'hg38_41'                             # TODO: add cli option to choose a ref 

# Build targets for ref genome 
# download step from GENCODE,
# files are gzipped; however
# final targets are not
resolve_ref = lambda f: f.split('/')[-1].rstrip('.gz') \
    if f.startswith('http') else f
ref_genome = resolve_ref(  
    config['references'][genome]['GENOME_FA']
) # Genomic FASTA file
ref_transcripts = resolve_ref(
    config['references'][genome]['TRANSCRIPTS_FA']
) # Transcriptomic FASTA file
ref_gtf = resolve_ref(
    config['references'][genome]['GTF_FILE']
) # GTF File

# Find list of sample which 
# have mulitple barcodes, this 
# means they need to be merged  
barcoded_samples = [k for k in samples2barcodes if samples2barcodes[k]]
samples = list(config['barcodes'].keys())
# Nanofilt read average quality score filter
quality_filter = int(
    config['options']['quality_filter']
) # Default: 8

# Determines if Conda or Singularity
# are used for software dependencies
use_singularity = True
use_conda =  str_bool(
     config['options']['use_conda']
) # default: False
# Use Singularity
if use_conda:
    # Conda and Singularity 
    # are mutually exclusive 
    use_singularity = False

# Read in resource information,
# containing information about 
# threads, mem, walltimes, etc.
# TODO: Add handler for when the
# mode is set to local.
with open(join('config', 'cluster.json')) as fh:
    cluster = json.load(fh)

# Final output files of the pipeline,
# Rule DAG built from listed here 
rule all:
    input:
        # Download reference files from GENOCDE,
        # PRI GENOMIC FA, TRANSCRIPTS FA, PRI GTF
        # @imported from `rules download_*` in rules/download.smk
        join(workpath, "refs", ref_genome),
        join(workpath, "refs", ref_transcripts),
        join(workpath, "refs", ref_gtf),
        # Merge samples with multiple barcodes,
        # @imported from `rule setup` in rules/trim.smk 
        expand(
            join(workpath, "{name}", "fastqs", "{name}.fastq.gz"), 
            name=samples
        ),
        # Base-calling quality filtering,
        # @imported from `rule nanofilt` in rules/trim.smk 
        expand(
            join(workpath, "{name}", "fastqs", "{name}.filtered.fastq.gz"),
            name=samples
        ),
        # FastQC report on raw data
        # @imported from `rule fastqc_raw` in rules/qc.smk
        expand(
            join(workpath, "{name}", "fastqc", "{name}_fastqc.html"),
            name=samples
        ),
        # FastQC report on quality filtered data
        # @imported from `rule fastqc_filtered` in rules/qc.smk
        expand(
            join(workpath, "{name}", "fastqc", "{name}.filtered_fastqc.html"),
            name=samples
        ),
        # Align to genome and transcriptome
        # @imported from `rules minimap2_*` in rules/map.smk
        expand(
            join(workpath, "{name}", "bams", "{name}.sorted.genome.bam"),
            name=samples
        ),
        expand(
            join(workpath, "{name}", "bams", "{name}.sorted.transcriptome.bam"),
            name=samples
        ),
        # Nanoplot to visualize alignment QC
        # @imported from `rule nanoplot` in rules/qc.smk
        expand(
            join(workpath, "{name}", "nanoplot", "NanoPlot-report.html"),
            name=samples
        ),
        # MultiQC to aggregate results into a report
        # @imported from `rule multiqc` in rules/qc.smk
        join(workpath, "reports", "multiqc_report.html"),


# Import rules 
include: join("rules", "common.smk")
include: join("rules", "download.smk")
include: join("rules", "trim.smk")
include: join("rules", "qc.smk")
include: join("rules", "map.smk")