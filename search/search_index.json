{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"modr \ud83d\udd2c An Oxford Nanopore direct RNA-sequencing Pipeline This is the home of the pipeline, modr. Its long-term goals: to accurately estimate known and novel transcript expression, to predict poly-A tail lengths, and to detect RNA modifications in Oxford Nanopore direct RNA-sequencing data like no pipeline before! Overview \u00b6 Welcome to modr's documentation! This guide is the main source of documentation for users that are getting started with the ONT RNA modification pipeline . The ./modr pipeline is composed several inter-related sub commands to setup and run the pipeline across different systems. Each of the available sub commands perform different functions: modr run Run the modr pipeline with your input files. modr unlock Unlocks a previous runs output directory. modr install Download remote reference files locally. modr cache Cache remote software containers locally. modr is an awesome pipeline to detect known/novel transcript expression, poly-A tail lengths, and RNA-editing in Oxford Nanopore direct RNA sequencing data. It relies on technologies like Singularity 1 to maintain the highest-level of reproducibility. The pipeline consists of a series of data processing and quality-control steps orchestrated by Snakemake 2 , a flexible and scalable workflow management system, to submit jobs to a cluster. The pipeline is compatible with direct RNA-sequencing data generated from Oxford Nanopore sequencing Technologies . As input, it accepts a set of FastQ & Fast5 files and can be run locally on a compute instance or on-premise using a cluster. A user can define the method or mode of execution. The pipeline can submit jobs to a cluster using a job scheduler like SLURM (more coming soon!). A hybrid approach ensures the pipeline is accessible to all users. Before getting started, we highly recommend reading through the usage section of each available sub command. For more information about issues or trouble-shooting a problem, please checkout our FAQ prior to opening an issue on Github . Contribute \u00b6 This site is a living document, created for and by members like you. modr is maintained by the members of OpenOmics and is improved by continous feedback! We encourage you to contribute new content and make improvements to existing content via pull request to our GitHub repository . References \u00b6 1. Kurtzer GM, Sochat V, Bauer MW (2017). Singularity: Scientific containers for mobility of compute. PLoS ONE 12(5): e0177459. 2. Koster, J. and S. Rahmann (2018). \"Snakemake-a scalable bioinformatics workflow engine.\" Bioinformatics 34(20): 3600.","title":"About"},{"location":"#overview","text":"Welcome to modr's documentation! This guide is the main source of documentation for users that are getting started with the ONT RNA modification pipeline . The ./modr pipeline is composed several inter-related sub commands to setup and run the pipeline across different systems. Each of the available sub commands perform different functions: modr run Run the modr pipeline with your input files. modr unlock Unlocks a previous runs output directory. modr install Download remote reference files locally. modr cache Cache remote software containers locally. modr is an awesome pipeline to detect known/novel transcript expression, poly-A tail lengths, and RNA-editing in Oxford Nanopore direct RNA sequencing data. It relies on technologies like Singularity 1 to maintain the highest-level of reproducibility. The pipeline consists of a series of data processing and quality-control steps orchestrated by Snakemake 2 , a flexible and scalable workflow management system, to submit jobs to a cluster. The pipeline is compatible with direct RNA-sequencing data generated from Oxford Nanopore sequencing Technologies . As input, it accepts a set of FastQ & Fast5 files and can be run locally on a compute instance or on-premise using a cluster. A user can define the method or mode of execution. The pipeline can submit jobs to a cluster using a job scheduler like SLURM (more coming soon!). A hybrid approach ensures the pipeline is accessible to all users. Before getting started, we highly recommend reading through the usage section of each available sub command. For more information about issues or trouble-shooting a problem, please checkout our FAQ prior to opening an issue on Github .","title":"Overview"},{"location":"#contribute","text":"This site is a living document, created for and by members like you. modr is maintained by the members of OpenOmics and is improved by continous feedback! We encourage you to contribute new content and make improvements to existing content via pull request to our GitHub repository .","title":"Contribute"},{"location":"#references","text":"1. Kurtzer GM, Sochat V, Bauer MW (2017). Singularity: Scientific containers for mobility of compute. PLoS ONE 12(5): e0177459. 2. Koster, J. and S. Rahmann (2018). \"Snakemake-a scalable bioinformatics workflow engine.\" Bioinformatics 34(20): 3600.","title":"References"},{"location":"examples/","text":"Examples \u00b6 This page is under construction. Please come back later for more information!","title":"Examples"},{"location":"examples/#examples","text":"This page is under construction. Please come back later for more information!","title":"Examples"},{"location":"license/","text":"MIT License \u00b6 Copyright \u00a9 2023 OpenOmics Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"license/#mit-license","text":"Copyright \u00a9 2023 OpenOmics Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"MIT License"},{"location":"setup/","text":"Dependencies \u00b6 Requirements Using Singularity : singularity>=3.5 snakemake>=6.0 Using Conda or Mamba : conda/mamba snakemake>=6.0 Snakemake must be installed on the target system. Snakemake is a workflow manager that orchestrates each step of the pipeline. The second dependency, i.e singularity OR conda/mamba , handles the dowloading/installation of any remaining software dependencies. By default, the pipeline will utilize singularity; however, the --use-conda option of the run sub command can be provided to use conda/mamba instead of singularity. If possible, we recommend using singularity over conda for reproducibility; however, it is worth noting that singularity and conda produce identical results for this pipeline. If you are running the pipeline on Windows, please use the Windows Subsystem for Linux (WSL) . Singularity can be installed on WSL following these instructions . You can check to see if modr's software requirements are met by running: # Check if dependencies # are already installed which snakemake || echo 'Error: snakemake is not install.' which singularity \\ || which conda \\ || which mamba \\ || echo 'Error: singularity or conda or mamba are not installed.' Installation \u00b6 Please ensure the software dependencies listed above are satisfied before getting started with this section. Also, please ensure each of the software dependencies listed above are in your $PATH . You can re-run the same command above to ensure each of the required dependencies are in your $PATH . You can install modr locally with the following command: # Clone modr from Github git clone https://github.com/OpenOmics/modr.git # Change your working directory cd modr/ # Get usage information ./modr -h Offline mode \u00b6 The modr pipeline can be run in an offline mode where external requests are not made at runtime. This will cache and download and remote resources or software containers (if using singlarity). Please note that if you are running the pipeline on Biowulf, you do NOT need to run these next steps. These instructions are for users running the pipeline outside of Biowulf cluster, i.e. on another cluster or locally on a laptop. Download resource bundle \u00b6 To download the pipeline's resource bundle, please run the following command: # Dry-run download of the resource bundle ./modr install --ref-path /data/ $USER /refs \\ --force --threads 4 --dry-run # Download the resource bundle ./modr install --ref-path /data/ $USER /refs \\ --force --threads 4 Please remember the path provided to the --ref-path option above. During the download process, a new child directory called modr will be created. The path to this directory should be provided to the --resource-bundle option of the run sub command . For more information, please see the documentation for the install sub command . Cache software containers \u00b6 This next step is only applicable for singularity users. If you are using conda/mamba instead of singularity, you can skip over this section. To cache remote software containers, please run the following command: # Dry run to see what will # be pulled from DockerHub ./modr cache --sif-cache /data/ $USER /cache --dry-run # Cache software containers ./modr cache --sif-cache /data/ $USER /cache Please remember the path provided to the --sif-cache option above, you will need to provide this path to the --sif-cache option of the run sub command . For more information, please see the documentation for the cache sub command . TLDR \u00b6 Here is everything you need to get quickly get started. This set of instructions assumes you have snakemake and (singularity or conda) already installed on your target system , and that both are in your $PATH . Following the example below, please replace --input .tests/*.gz with your input ONT FastQ files. If you are running the pipeline on Windows, please use the Windows Subsystem for Linux (WSL). Quick Start Other system + offline mode Other system + Conda Biowulf These instructions are for users/admins setting up the pipeline to run ouside of Biowulf in an offline mode. The pipeline can be run in an offline mode for users that do not have internet access. This mode is useful for researchers running the pipeline in the field on a local laptop. In this example, we will cache/download remote resources in our $HOME directory, but please feel free to point to any other location on you computer or target system. You will need about 4 GB of free diskspace for the download. # Clone modr from Github git clone https://github.com/OpenOmics/modr.git # Change your working directory cd modr/ # Get usage information ./modr -h # Download resource bundle ./modr install --ref-path $HOME /refs --force --threads 4 # Cache software containers ./modr cache --sif-cache $HOME /SIFs # Dry run modr pipeline ./modr run --input .tests/*.gz --output tmp_01/ \\ --resource-bundle $HOME /refs/modr \\ --sif-cache $HOME /SIFs --mode local \\ --dry-run # Run modr pipeline # in offline-mode ./modr run --input .tests/*.gz --output tmp_01/ \\ --resource-bundle $HOME /refs/modr \\ --sif-cache $HOME /SIFs --mode local These instructions are for users/admins setting up the pipeline outside of Biowulf. Please note at the current moment the use of conda requires internet access. If you wish to run the pipeline in an offline mode, please use singularity and cache the pipeline's software containers . In this example, we will download the resource bundle in our $HOME directory, but please feel free to point to any other location on you computer or target system. You will need about 4 GB of free diskspace for the download. # Clone modr from Github git clone https://github.com/OpenOmics/modr.git # Change your working directory cd modr/ # Get usage information ./modr -h # Download resource bundle ./modr install --ref-path $HOME /refs --force --threads 4 # Dry run modr pipeline ./modr run --input .tests/*.gz --output tmp_01/ \\ --resource-bundle $HOME /refs/modr \\ --mode local --dry-run # Run modr pipeline # with conda/mamba ./modr run --input .tests/*.gz --output tmp_01/ \\ --resource-bundle $HOME /refs/modr \\ --mode local If you are running the pipeline on Biowulf, do NOT need to download the resource bundle. These reference files already exist on Biowulf, and the pipeline is setup to automatically use them as needed. Also, we have already cached all of the pipeline's software containers here: /data/OpenOmics/SIFs/ . If you are on Biowulf, you can module load the required dependencies. Whenever the pipeline is provided with the --sif-cache option, it is run in an offline mode. We always recommend providing --sif-cache /data/OpenOmics/SIFs/ when running the pipeline on Biowulf. This avoids issues related to DockerHub request limits if multiple users are concurrently run the pipeline on the cluster. # Grab an interactive node, # do not run on head node! srun -N 1 -n 1 --time = 1 :00:00 --mem = 8gb --cpus-per-task = 2 --pty bash module purge module load singularity snakemake # Clone modr from Github git clone https://github.com/OpenOmics/modr.git # Change your working directory cd modr/ # Get usage information ./modr -h # Dry run modr pipeline ./modr run --input .tests/*.gz --output tmp_01/ \\ --sif-cache /data/OpenOmics/SIFs/ \\ --mode slurm \\ --dry-run # Run modr pipeline # on Biowulf cluster ./modr run --input .tests/*.gz --output tmp_01/ \\ --sif-cache /data/OpenOmics/SIFs/ \\ --mode slurm","title":"Setup"},{"location":"setup/#dependencies","text":"Requirements Using Singularity : singularity>=3.5 snakemake>=6.0 Using Conda or Mamba : conda/mamba snakemake>=6.0 Snakemake must be installed on the target system. Snakemake is a workflow manager that orchestrates each step of the pipeline. The second dependency, i.e singularity OR conda/mamba , handles the dowloading/installation of any remaining software dependencies. By default, the pipeline will utilize singularity; however, the --use-conda option of the run sub command can be provided to use conda/mamba instead of singularity. If possible, we recommend using singularity over conda for reproducibility; however, it is worth noting that singularity and conda produce identical results for this pipeline. If you are running the pipeline on Windows, please use the Windows Subsystem for Linux (WSL) . Singularity can be installed on WSL following these instructions . You can check to see if modr's software requirements are met by running: # Check if dependencies # are already installed which snakemake || echo 'Error: snakemake is not install.' which singularity \\ || which conda \\ || which mamba \\ || echo 'Error: singularity or conda or mamba are not installed.'","title":"Dependencies"},{"location":"setup/#installation","text":"Please ensure the software dependencies listed above are satisfied before getting started with this section. Also, please ensure each of the software dependencies listed above are in your $PATH . You can re-run the same command above to ensure each of the required dependencies are in your $PATH . You can install modr locally with the following command: # Clone modr from Github git clone https://github.com/OpenOmics/modr.git # Change your working directory cd modr/ # Get usage information ./modr -h","title":"Installation"},{"location":"setup/#offline-mode","text":"The modr pipeline can be run in an offline mode where external requests are not made at runtime. This will cache and download and remote resources or software containers (if using singlarity). Please note that if you are running the pipeline on Biowulf, you do NOT need to run these next steps. These instructions are for users running the pipeline outside of Biowulf cluster, i.e. on another cluster or locally on a laptop.","title":"Offline mode"},{"location":"setup/#download-resource-bundle","text":"To download the pipeline's resource bundle, please run the following command: # Dry-run download of the resource bundle ./modr install --ref-path /data/ $USER /refs \\ --force --threads 4 --dry-run # Download the resource bundle ./modr install --ref-path /data/ $USER /refs \\ --force --threads 4 Please remember the path provided to the --ref-path option above. During the download process, a new child directory called modr will be created. The path to this directory should be provided to the --resource-bundle option of the run sub command . For more information, please see the documentation for the install sub command .","title":"Download resource bundle"},{"location":"setup/#cache-software-containers","text":"This next step is only applicable for singularity users. If you are using conda/mamba instead of singularity, you can skip over this section. To cache remote software containers, please run the following command: # Dry run to see what will # be pulled from DockerHub ./modr cache --sif-cache /data/ $USER /cache --dry-run # Cache software containers ./modr cache --sif-cache /data/ $USER /cache Please remember the path provided to the --sif-cache option above, you will need to provide this path to the --sif-cache option of the run sub command . For more information, please see the documentation for the cache sub command .","title":"Cache software containers"},{"location":"setup/#tldr","text":"Here is everything you need to get quickly get started. This set of instructions assumes you have snakemake and (singularity or conda) already installed on your target system , and that both are in your $PATH . Following the example below, please replace --input .tests/*.gz with your input ONT FastQ files. If you are running the pipeline on Windows, please use the Windows Subsystem for Linux (WSL). Quick Start Other system + offline mode Other system + Conda Biowulf These instructions are for users/admins setting up the pipeline to run ouside of Biowulf in an offline mode. The pipeline can be run in an offline mode for users that do not have internet access. This mode is useful for researchers running the pipeline in the field on a local laptop. In this example, we will cache/download remote resources in our $HOME directory, but please feel free to point to any other location on you computer or target system. You will need about 4 GB of free diskspace for the download. # Clone modr from Github git clone https://github.com/OpenOmics/modr.git # Change your working directory cd modr/ # Get usage information ./modr -h # Download resource bundle ./modr install --ref-path $HOME /refs --force --threads 4 # Cache software containers ./modr cache --sif-cache $HOME /SIFs # Dry run modr pipeline ./modr run --input .tests/*.gz --output tmp_01/ \\ --resource-bundle $HOME /refs/modr \\ --sif-cache $HOME /SIFs --mode local \\ --dry-run # Run modr pipeline # in offline-mode ./modr run --input .tests/*.gz --output tmp_01/ \\ --resource-bundle $HOME /refs/modr \\ --sif-cache $HOME /SIFs --mode local These instructions are for users/admins setting up the pipeline outside of Biowulf. Please note at the current moment the use of conda requires internet access. If you wish to run the pipeline in an offline mode, please use singularity and cache the pipeline's software containers . In this example, we will download the resource bundle in our $HOME directory, but please feel free to point to any other location on you computer or target system. You will need about 4 GB of free diskspace for the download. # Clone modr from Github git clone https://github.com/OpenOmics/modr.git # Change your working directory cd modr/ # Get usage information ./modr -h # Download resource bundle ./modr install --ref-path $HOME /refs --force --threads 4 # Dry run modr pipeline ./modr run --input .tests/*.gz --output tmp_01/ \\ --resource-bundle $HOME /refs/modr \\ --mode local --dry-run # Run modr pipeline # with conda/mamba ./modr run --input .tests/*.gz --output tmp_01/ \\ --resource-bundle $HOME /refs/modr \\ --mode local If you are running the pipeline on Biowulf, do NOT need to download the resource bundle. These reference files already exist on Biowulf, and the pipeline is setup to automatically use them as needed. Also, we have already cached all of the pipeline's software containers here: /data/OpenOmics/SIFs/ . If you are on Biowulf, you can module load the required dependencies. Whenever the pipeline is provided with the --sif-cache option, it is run in an offline mode. We always recommend providing --sif-cache /data/OpenOmics/SIFs/ when running the pipeline on Biowulf. This avoids issues related to DockerHub request limits if multiple users are concurrently run the pipeline on the cluster. # Grab an interactive node, # do not run on head node! srun -N 1 -n 1 --time = 1 :00:00 --mem = 8gb --cpus-per-task = 2 --pty bash module purge module load singularity snakemake # Clone modr from Github git clone https://github.com/OpenOmics/modr.git # Change your working directory cd modr/ # Get usage information ./modr -h # Dry run modr pipeline ./modr run --input .tests/*.gz --output tmp_01/ \\ --sif-cache /data/OpenOmics/SIFs/ \\ --mode slurm \\ --dry-run # Run modr pipeline # on Biowulf cluster ./modr run --input .tests/*.gz --output tmp_01/ \\ --sif-cache /data/OpenOmics/SIFs/ \\ --mode slurm","title":"TLDR"},{"location":"faq/questions/","text":"Frequently Asked Questions \u00b6 This page is still under construction. If you need immediate help, please open an issue on Github!","title":"General Questions"},{"location":"faq/questions/#frequently-asked-questions","text":"This page is still under construction. If you need immediate help, please open an issue on Github!","title":"Frequently Asked Questions"},{"location":"usage/cache/","text":"modr cache \u00b6 1. About \u00b6 The modr executable is composed of several inter-related sub commands. Please see modr -h for all available options. This part of the documentation describes options and concepts for modr cache sub command in more detail. With minimal configuration, the cache sub command enables you to cache remote software containers from Dockerhub . Caching remote software containers allows the pipeline to run in an offline mode where no requests are made. The cache sub command can also be used to pull our pre-built software container onto a new cluster or target system. These containers are normally pulled onto the filesystem when the pipeline runs; however, due to network issues or DockerHub pull rate limits, it may make sense to pull the resources once so a shared cache can be created. It is worth noting that a singularity cache cannot normally be shared across users. Singularity strictly enforces that a cache is owned by the user. To get around this issue, the cache subcommand can be used to create local SIFs on the filesystem from images on DockerHub. The path of these locally cached SIFs can be passed to the run sub commands --sif-cache option. Caching software containers is fast and easy! In its most basic form, modr cache only has one required input . 2. Synopsis \u00b6 $ ./modr cache [--help] [--dry-run] \\ --sif-cache SIF_CACHE The synopsis for each command shows its parameters and their usage. Optional parameters are shown in square brackets. A user must provide a directory to cache remote Docker images via the --sif-cache argument. Once the cache has pipeline completed, the local sif cache can be passed to the --sif-cache option of the modr run subcomand. This enables the pipeline to run in an offline mode. Use you can always use the -h option for information on a specific command. 2.1 Required Arguments \u00b6 --sif-cache SIF_CACHE Path where a local cache of SIFs will be stored. type: path Any images defined in config/containers.json will be pulled into the local filesystem. The path provided to this option can be passed to the --sif-cache option of the modr run subcomand. This allows for running the build and run pipelines in an offline mode where no requests are made to external sources. This is useful for avoiding network issues or DockerHub pull rate limits. Please see modr run for more information. Example: --sif-cache /data/$USER/cache 2.2 Options \u00b6 Each of the following arguments are optional and do not need to be provided. -h, --help Display Help. type: boolean flag Shows command's synopsis, help message, and an example command Example: --help --dry-run Dry run the pipeline. type: boolean flag Only displays what software container will be cached locally. Does not execute anything! Example: --dry-run 3. Example \u00b6 # Step 0.) Grab an interactive node (do not run on head node) srun -N 1 -n 1 --time = 12 :00:00 -p interactive --mem = 8gb --cpus-per-task = 4 --pty bash module purge module load singularity snakemake # Step 1.) Dry run to see what will be pulled ./modr cache --sif-cache /data/ $USER /cache \\ --dry-run # Step 2.) Cache remote resources locally. # This command will NOT automatically submit # a job to the cluster. As so, we recommend # submitting this next command to the cluster # as a job. Download speeds will vary so it # is best to set the wall time a few hours. ./modr cache --sif-cache /data/ $USER /cache","title":"modr cache"},{"location":"usage/cache/#modr-cache","text":"","title":"modr cache"},{"location":"usage/cache/#1-about","text":"The modr executable is composed of several inter-related sub commands. Please see modr -h for all available options. This part of the documentation describes options and concepts for modr cache sub command in more detail. With minimal configuration, the cache sub command enables you to cache remote software containers from Dockerhub . Caching remote software containers allows the pipeline to run in an offline mode where no requests are made. The cache sub command can also be used to pull our pre-built software container onto a new cluster or target system. These containers are normally pulled onto the filesystem when the pipeline runs; however, due to network issues or DockerHub pull rate limits, it may make sense to pull the resources once so a shared cache can be created. It is worth noting that a singularity cache cannot normally be shared across users. Singularity strictly enforces that a cache is owned by the user. To get around this issue, the cache subcommand can be used to create local SIFs on the filesystem from images on DockerHub. The path of these locally cached SIFs can be passed to the run sub commands --sif-cache option. Caching software containers is fast and easy! In its most basic form, modr cache only has one required input .","title":"1. About"},{"location":"usage/cache/#2-synopsis","text":"$ ./modr cache [--help] [--dry-run] \\ --sif-cache SIF_CACHE The synopsis for each command shows its parameters and their usage. Optional parameters are shown in square brackets. A user must provide a directory to cache remote Docker images via the --sif-cache argument. Once the cache has pipeline completed, the local sif cache can be passed to the --sif-cache option of the modr run subcomand. This enables the pipeline to run in an offline mode. Use you can always use the -h option for information on a specific command.","title":"2. Synopsis"},{"location":"usage/cache/#21-required-arguments","text":"--sif-cache SIF_CACHE Path where a local cache of SIFs will be stored. type: path Any images defined in config/containers.json will be pulled into the local filesystem. The path provided to this option can be passed to the --sif-cache option of the modr run subcomand. This allows for running the build and run pipelines in an offline mode where no requests are made to external sources. This is useful for avoiding network issues or DockerHub pull rate limits. Please see modr run for more information. Example: --sif-cache /data/$USER/cache","title":"2.1 Required Arguments"},{"location":"usage/cache/#22-options","text":"Each of the following arguments are optional and do not need to be provided. -h, --help Display Help. type: boolean flag Shows command's synopsis, help message, and an example command Example: --help --dry-run Dry run the pipeline. type: boolean flag Only displays what software container will be cached locally. Does not execute anything! Example: --dry-run","title":"2.2 Options"},{"location":"usage/cache/#3-example","text":"# Step 0.) Grab an interactive node (do not run on head node) srun -N 1 -n 1 --time = 12 :00:00 -p interactive --mem = 8gb --cpus-per-task = 4 --pty bash module purge module load singularity snakemake # Step 1.) Dry run to see what will be pulled ./modr cache --sif-cache /data/ $USER /cache \\ --dry-run # Step 2.) Cache remote resources locally. # This command will NOT automatically submit # a job to the cluster. As so, we recommend # submitting this next command to the cluster # as a job. Download speeds will vary so it # is best to set the wall time a few hours. ./modr cache --sif-cache /data/ $USER /cache","title":"3. Example"},{"location":"usage/install/","text":"modr install \u00b6 1. About \u00b6 The modr executable is composed of several inter-related sub commands. Please see modr -h for all available options. This part of the documentation describes options and concepts for modr install sub command in more detail. With minimal configuration, the install sub command enables you to download the pipeline's resource bundle locally. This is necessary when setting up the pipeline on a new target system or cluster. The pipeline uses a set of reference files to process the data. These reference files are required and need to be available on the local file system prior to execution. This command can be used to download any required reference files of the pipeline. Since most resource bundles are very large; we recommend using multiple threads for pulling reference files concurrently. The resource bundle can be very large so please ensure you have sufficent disk space prior to running this sub command. Please Note: The resource bundle requires about 2 GB of available disk space. If you are running the pipeline on the Biowulf cluster, you do NOT need to download the pipeline's resource bundle. It is already accessible to all HPC users. This sub command is for users running the pipeline outside of the Biowulf cluster. Downloading the resource bundle is fast and easy! In its most basic form, modr install only has one required input . 2. Synopsis \u00b6 $ modr install [--help] [--dry-run] \\ [--force] [--threads] \\ --ref-path REF_PATH The synopsis for each command shows its parameters and their usage. Optional parameters are shown in square brackets. A user must provide a output directory for the reference file download via the --ref-path argument. Once the download of the resource bundle has completed, a new child directory called modr will be created. This new directory will contain all of the pipeline's required reference files. The path to this new directory can be passed to the --resource-bundle option of the modr run subcomand. This allow users outside of Biowulf to run the pipeline. Use you can always use the -h option for information on a specific command. 2.1 Required Arguments \u00b6 --ref-path REF_PATH Path where the resource bundle will be downloaded. type: path Any resouces defined in the 'config/install.json' will be pulled onto the local filesystem. After the files have been downloaded, a new directory with the name modr will be created. It contains all the required reference files of the pipeline. The path to this new directory can be passed to the run sub command's --resource-bundle option. Please see the run sub command for more information. Example: --ref-path /data/$USER/refs 2.2 Options \u00b6 Each of the following arguments are optional and do not need to be provided. -h, --help Display Help. type: boolean flag Shows command's synopsis, help message, and an example command Example: --help --dry-run Dry run the pipeline. type: boolean flag Displays what remote resources would be pulled. Does not execute anything! Example: --dry-run --force Force downloads all files. type: boolean flag By default, any files that do not exist locally are pulled; however if a previous instance of an install did not exit gracefully, it may be necessary to forcefully re-download all the files. Example: --force --threads Number of threads to use for concurrent file downloads. type: int default: 2 Max number of threads to use for concurrent file downloads. Example: --threads 12 3. Example \u00b6 # Step 0.) Grab an interactive node, # do not run on head node! srun -N 1 -n 1 --time = 12 :00:00 -p interactive --mem = 24gb --cpus-per-task = 12 --pty bash module purge module load singularity snakemake # Step 1.) Dry-run download of the resource bundle modr install --ref-path /data/ $USER /refs \\ --force \\ --dry-run \\ --threads 12 # Step 2.) Download the resource bundle, # This command will NOT automatically submit # a job to the cluster. As so, we recommend # submitting this next command to the cluster # as a job. Download speeds will vary so it # is best to set the wall time to 2 days. modr install --ref-path /data/ $USER /refs \\ --force \\ --threads 12 # Checkout the downloaded files cd /data/ $USER /refs tree modr # modr/ # \u251c\u2500\u2500 kronatax_1222 # \u2502 \u2514\u2500\u2500 taxonomy.tab # \u2514\u2500\u2500 NCBI # \u2514\u2500\u2500 viral_genomes_taxid.fa","title":"modr install"},{"location":"usage/install/#modr-install","text":"","title":"modr install"},{"location":"usage/install/#1-about","text":"The modr executable is composed of several inter-related sub commands. Please see modr -h for all available options. This part of the documentation describes options and concepts for modr install sub command in more detail. With minimal configuration, the install sub command enables you to download the pipeline's resource bundle locally. This is necessary when setting up the pipeline on a new target system or cluster. The pipeline uses a set of reference files to process the data. These reference files are required and need to be available on the local file system prior to execution. This command can be used to download any required reference files of the pipeline. Since most resource bundles are very large; we recommend using multiple threads for pulling reference files concurrently. The resource bundle can be very large so please ensure you have sufficent disk space prior to running this sub command. Please Note: The resource bundle requires about 2 GB of available disk space. If you are running the pipeline on the Biowulf cluster, you do NOT need to download the pipeline's resource bundle. It is already accessible to all HPC users. This sub command is for users running the pipeline outside of the Biowulf cluster. Downloading the resource bundle is fast and easy! In its most basic form, modr install only has one required input .","title":"1. About"},{"location":"usage/install/#2-synopsis","text":"$ modr install [--help] [--dry-run] \\ [--force] [--threads] \\ --ref-path REF_PATH The synopsis for each command shows its parameters and their usage. Optional parameters are shown in square brackets. A user must provide a output directory for the reference file download via the --ref-path argument. Once the download of the resource bundle has completed, a new child directory called modr will be created. This new directory will contain all of the pipeline's required reference files. The path to this new directory can be passed to the --resource-bundle option of the modr run subcomand. This allow users outside of Biowulf to run the pipeline. Use you can always use the -h option for information on a specific command.","title":"2. Synopsis"},{"location":"usage/install/#21-required-arguments","text":"--ref-path REF_PATH Path where the resource bundle will be downloaded. type: path Any resouces defined in the 'config/install.json' will be pulled onto the local filesystem. After the files have been downloaded, a new directory with the name modr will be created. It contains all the required reference files of the pipeline. The path to this new directory can be passed to the run sub command's --resource-bundle option. Please see the run sub command for more information. Example: --ref-path /data/$USER/refs","title":"2.1 Required Arguments"},{"location":"usage/install/#22-options","text":"Each of the following arguments are optional and do not need to be provided. -h, --help Display Help. type: boolean flag Shows command's synopsis, help message, and an example command Example: --help --dry-run Dry run the pipeline. type: boolean flag Displays what remote resources would be pulled. Does not execute anything! Example: --dry-run --force Force downloads all files. type: boolean flag By default, any files that do not exist locally are pulled; however if a previous instance of an install did not exit gracefully, it may be necessary to forcefully re-download all the files. Example: --force --threads Number of threads to use for concurrent file downloads. type: int default: 2 Max number of threads to use for concurrent file downloads. Example: --threads 12","title":"2.2 Options"},{"location":"usage/install/#3-example","text":"# Step 0.) Grab an interactive node, # do not run on head node! srun -N 1 -n 1 --time = 12 :00:00 -p interactive --mem = 24gb --cpus-per-task = 12 --pty bash module purge module load singularity snakemake # Step 1.) Dry-run download of the resource bundle modr install --ref-path /data/ $USER /refs \\ --force \\ --dry-run \\ --threads 12 # Step 2.) Download the resource bundle, # This command will NOT automatically submit # a job to the cluster. As so, we recommend # submitting this next command to the cluster # as a job. Download speeds will vary so it # is best to set the wall time to 2 days. modr install --ref-path /data/ $USER /refs \\ --force \\ --threads 12 # Checkout the downloaded files cd /data/ $USER /refs tree modr # modr/ # \u251c\u2500\u2500 kronatax_1222 # \u2502 \u2514\u2500\u2500 taxonomy.tab # \u2514\u2500\u2500 NCBI # \u2514\u2500\u2500 viral_genomes_taxid.fa","title":"3. Example"},{"location":"usage/run/","text":"modr run \u00b6 1. About \u00b6 The modr executable is composed of several inter-related sub commands. Please see modr -h for all available options. This part of the documentation describes options and concepts for modr run sub command in more detail. With minimal configuration, the run sub command enables you to start running modr pipeline. Setting up the modr pipeline is fast and easy! In its most basic form, modr run only has four required inputs . 2. Synopsis \u00b6 $ modr run [--help] \\ [--dry-run] [--job-name JOB_NAME] [--mode {slurm,local}] \\ [--sif-cache SIF_CACHE] [--singularity-cache SINGULARITY_CACHE] \\ [--silent] [--threads THREADS] [--tmp-dir TMP_DIR] \\ [--resource-bundle RESOURCE_BUNDLE] [--use-conda] \\ [--contrasts CONTRASTS] [--quality-filter QUALITY_FILTER] \\ [--rna-editing {A-I, ...}] \\ --genome {hg38_41, mm10_M25, mm39_M31} \\ --groups GROUPS \\ --input INPUT [INPUT ...] \\ --output OUTPUT The synopsis for each command shows its arguments and their usage. Optional arguments are shown in square brackets. A user must provide a list of FastQ (globbing is supported) to analyze via --input argument, an output directory to store results via --output argument, a reference genome via the --genome argument, and a groups file containing additional sample metadata via the --groups argument. Use you can always use the -h option for information on a specific command. 2.1 Required arguments \u00b6 Each of the following arguments are required. Failure to provide a required argument will result in a non-zero exit-code. --input INPUT [INPUT ...] Input Oxford Nanopore FastQ files(s). type: file(s) One or more FastQ files can be provided. From the command-line, each input file should seperated by a space. Globbing is supported! This makes selecting FastQ files easy. Input FastQ files should always be gzipp-ed. If a sample has multiple fastq files for different barcodes, the pipeline expects each barcoded FastQ file endwith the following extension: _N.fastq.gz , where N is a number. Internally, the pipeline will concatenate each of these FastQ files prior to processing the data. Here is an example of an input sample with multiple barcode sequences: S1_0.fastq.gz , S1_1.fastq.gz , S1_2.fastq.gz , S1_3.fastq.gz . Given this barcoded sample, the pipeline will create the following concatenated FastQ file: S1.fastq.gz . Example: --input .tests/*.fastq.gz --output OUTPUT Path to an output directory. type: path This location is where the pipeline will create all of its output files, also known as the pipeline's working directory. If the provided output directory does not exist, it will be created automatically. Example: --output /data/$USER/modr_out --genome {hg38_41, mm10_M25, mm39_M31} Reference genome. type: string This option defines the reference genome of the samples. modr does comes bundled with pre-built reference files from GENCODE for human and mouse samples. Please select from one of the following options: hg38_41 , mm10_M25 , mm39_M31 . Please note that hg38_41 is a human reference genome, while mm10_M25 and mm39_M31 are two different reference genomes available for mouse. Example: Example: --genome hg38_41 --groups GROUPS Groups file. type: file This tab-delimited (TSV) file is used to collect additional metadata that is required to run the pipeline. This file consists of three columns containing the names of each sample, the path to the sample's fast5 directory, and the name of a group a sample is assoicated with. Each of these fields is required! The first column should contain the base name of a given sample. The base name of a given sample can be determined by removing its file extension from the sample's FastQ file, for example: WT_S4.fastq.gz becomes WT_S4 in the groups file. Here is an example base name of a multiplexed sample. Given: WT_S2_1.fastq.gz , WT_S2_2.fastq.gz , WT_S2_3.fastq.gz The base name would be WT_S2 . The second column should contain the path to the sample's fast5 directory. The fast5 directory contains HDF5 files which couple sequencing information with raw event signal from the ONT sequencer. The raw signal information is used to infer RNA modifcation. As so, the pipeline needs access to both the FastQ files and their fast5 files. The third, and last column, contains group information for each sample. A user can set their own groups. A group can represent anything from a timepoint, to a experimental condition, to a treatment, etc. Please note that groups are composed of alphanumeric characters, cannot startwith a number, and cannot contain any - characters. Groups can contain _ character. Contents of example groups file: WT_S1 .tests/WT_S1/fast5/ T1 WT_S2 .tests/WT_S2/fast5/ T1 WT_S3 .tests/WT_S3/fast5/ T2 WT_S4 .tests/WT_S4/fast5/ T2 WT_S5 .tests/WT_S5/fast5/ T2 Example: Example: --groups .tests/groups.tsv 2.2 Analysis options \u00b6 Each of the following arguments are optional, and do not need to be provided. --contrasts CONTRASTS Contrasts file for Differential Analyses. type: file This tab-delimited (TSV) file is used to setup comparisons between different sets of groups. These comparsions are used to find differential transcript expression (DTE), differential transcript usage (DTU), and differential alternative splicing (AS) events. Please see the --groups option above for more information about how to define groups within a set of samples. The contrasts file consists of two columns containing the names of each group to compare. The names defined in this file must also exist in the groups file. Given the following groups file: WT_S1 .tests/WT_S1/fast5/ T1 WT_S2 .tests/WT_S2/fast5/ T1 WT_S3 .tests/WT_S3/fast5/ T2 WT_S4 .tests/WT_S4/fast5/ T2 WT_S5 .tests/WT_S5/fast5/ T2 Here is an example contrasts file: T2 T1 Please note: the order of the groups defined in the contrasts file will determine how to interpret the direction of the fold-change. As so, if we use the T2 T1 comparison as an example for interpreting DTE results, a positive fold-change for a given transcript would indicate that the T2 samples' expression is higher than the T1 samples' expression. Example: Example: --contrasts .tests/contrasts.tsv --quality-filter QUALITY_FILTER Quality score filter. type: int default: 8 This option filters reads on a minimum average quality score. Any reads with an average minimum quality score less than this threshold will be removed. The default average minimum quality filter is set to 8. Example: --quality-filter 10 --rna-editing {A-I, ...} Type of RNA editing or RNA modifications to identify. type: str default: None RNA editing has been show to affect the function and stability of RNA molecules. This option allow a user to define the type of RNA editing sites to identify. The pipeline can currently identify the following types of RNA editing (more coming soon!): A-I : A common type of RNA editing catalysed by double-stranded RNA (dsRNA)-specific adenosine deaminase (ADAR) enzymes. Example: --rna-editing A-I 2.3 Orchestration options \u00b6 Each of the following arguments are optional, and do not need to be provided. --dry-run Dry run the pipeline. type: boolean flag Displays what steps in the pipeline remain or will be run. Does not execute anything! Example: --dry-run --silent Silence standard output. type: boolean flag Reduces the amount of information directed to standard output when submitting master job to the job scheduler. Only the job id of the master job is returned. Example: --silent --mode {slurm,local} Execution Method. type: string default: slurm Execution Method. Defines the mode or method of execution. Vaild mode options include: slurm or local. slurm The slurm execution method will submit jobs to the SLURM workload manager . It is recommended running modr in this mode as execution will be significantly faster in a distributed environment. This is the default mode of execution. local Local executions will run serially on compute instance. This is useful for testing, debugging, or when a users does not have access to a high performance computing environment. If this option is not provided, it will default to a local execution mode. Example: --mode slurm --job-name JOB_NAME Set the name of the pipeline's master job. type: string default: pl:modr When submitting the pipeline to a job scheduler, like SLURM, this option always you to set the name of the pipeline's master job. By default, the name of the pipeline's master job is set to \"pl:modr\". Example: --job-name pl_id-42 --singularity-cache SINGULARITY_CACHE Overrides the $SINGULARITY_CACHEDIR environment variable. type: path default: --output OUTPUT/.singularity Singularity will cache image layers pulled from remote registries. This ultimately speeds up the process of pull an image from DockerHub if an image layer already exists in the singularity cache directory. By default, the cache is set to the value provided to the --output argument. Please note that this cache cannot be shared across users. Singularity strictly enforces you own the cache directory and will return a non-zero exit code if you do not own the cache directory! See the --sif-cache option to create a shareable resource. Example: --singularity-cache /data/$USER/.singularity --sif-cache SIF_CACHE Path where a local cache of SIFs are stored. type: path Uses a local cache of SIFs on the filesystem. This SIF cache can be shared across users if permissions are set correctly. If a SIF does not exist in the SIF cache, the image will be pulled from Dockerhub and a warning message will be displayed. The modr cache subcommand can be used to create a local SIF cache. Please see modr cache for more information. This command is extremely useful for avoiding DockerHub pull rate limits. It also remove any potential errors that could occur due to network issues or DockerHub being temporarily unavailable. We recommend running modr with this option when ever possible. Example: --singularity-cache /data/$USER/SIFs --threads THREADS Max number of threads for each process. type: int default: 2 Max number of threads for each process. This option is more applicable when running the pipeline with --mode local . It is recommended setting this vaule to the maximum number of CPUs available on the host machine. Example: --threads 12 --tmp-dir TMP_DIR Max number of threads for each process. type: path default: /lscratch/$SLURM_JOBID Path on the file system for writing temporary output files. By default, the temporary directory is set to '/lscratch/$SLURM_JOBID' for backwards compatibility with the NIH's Biowulf cluster; however, if you are running the pipeline on another cluster, this option will need to be specified. Ideally, this path should point to a dedicated location on the filesystem for writing tmp files. On many systems, this location is set to somewhere in /scratch. If you need to inject a variable into this string that should NOT be expanded, please quote this options value in single quotes. Example: --tmp-dir /scratch/$USER/ --resource-bundle RESOURCE_BUNDLE Path to a resource bundle downloaded with the install sub command. type: path The resource bundle contains the set of required reference files for processing any data. The path provided to this option will be the path to the modr directory that was created when running the install sub command. Please see the install sub command for more information about downloading the pipeline's resource bundle. Example: --resource-bundle /data/$USER/refs/modr --use-conda Use Conda/mamba instead of Singularity. type: boolean flag Use Conda/Mamba instead of Singularity. By default, the pipeline uses singularity for handling required software dependencies. This option overrides that behavior, and it will use Conda or mamba instead of Singularity. The use of Singuarity and Conda are mutually exclusive. Please note that conda or mamba must be in your $PATH prior to running the pipeline. Example: --use-conda 2.4 Miscellaneous options \u00b6 Each of the following arguments are optional, and do not need to be provided. -h, --help Display Help. type: boolean flag Shows command's synopsis, help message, and an example command Example: --help 3. Example \u00b6 # Step 1.) Grab an interactive node, # do not run on head node! srun -N 1 -n 1 --time = 1 :00:00 --mem = 8gb --cpus-per-task = 2 --pty bash module purge module load singularity snakemake # Step 2A.) Dry-run the pipeline ./modr run --input .tests/*.fastq.gz \\ --output test_01 \\ --genome hg38_41 \\ --groups .tests/groups.tsv \\ --mode slurm \\ --dry-run # Step 2B.) Run the modr pipeline # The slurm mode will submit jobs to # the cluster. It is recommended running # the pipeline in this mode. ./modr run --input .tests/*.fastq.gz \\ --output test_01 \\ --genome hg38_41 \\ --groups .tests/groups.tsv \\ --mode slurm","title":"modr run"},{"location":"usage/run/#modr-run","text":"","title":"modr run"},{"location":"usage/run/#1-about","text":"The modr executable is composed of several inter-related sub commands. Please see modr -h for all available options. This part of the documentation describes options and concepts for modr run sub command in more detail. With minimal configuration, the run sub command enables you to start running modr pipeline. Setting up the modr pipeline is fast and easy! In its most basic form, modr run only has four required inputs .","title":"1. About"},{"location":"usage/run/#2-synopsis","text":"$ modr run [--help] \\ [--dry-run] [--job-name JOB_NAME] [--mode {slurm,local}] \\ [--sif-cache SIF_CACHE] [--singularity-cache SINGULARITY_CACHE] \\ [--silent] [--threads THREADS] [--tmp-dir TMP_DIR] \\ [--resource-bundle RESOURCE_BUNDLE] [--use-conda] \\ [--contrasts CONTRASTS] [--quality-filter QUALITY_FILTER] \\ [--rna-editing {A-I, ...}] \\ --genome {hg38_41, mm10_M25, mm39_M31} \\ --groups GROUPS \\ --input INPUT [INPUT ...] \\ --output OUTPUT The synopsis for each command shows its arguments and their usage. Optional arguments are shown in square brackets. A user must provide a list of FastQ (globbing is supported) to analyze via --input argument, an output directory to store results via --output argument, a reference genome via the --genome argument, and a groups file containing additional sample metadata via the --groups argument. Use you can always use the -h option for information on a specific command.","title":"2. Synopsis"},{"location":"usage/run/#21-required-arguments","text":"Each of the following arguments are required. Failure to provide a required argument will result in a non-zero exit-code. --input INPUT [INPUT ...] Input Oxford Nanopore FastQ files(s). type: file(s) One or more FastQ files can be provided. From the command-line, each input file should seperated by a space. Globbing is supported! This makes selecting FastQ files easy. Input FastQ files should always be gzipp-ed. If a sample has multiple fastq files for different barcodes, the pipeline expects each barcoded FastQ file endwith the following extension: _N.fastq.gz , where N is a number. Internally, the pipeline will concatenate each of these FastQ files prior to processing the data. Here is an example of an input sample with multiple barcode sequences: S1_0.fastq.gz , S1_1.fastq.gz , S1_2.fastq.gz , S1_3.fastq.gz . Given this barcoded sample, the pipeline will create the following concatenated FastQ file: S1.fastq.gz . Example: --input .tests/*.fastq.gz --output OUTPUT Path to an output directory. type: path This location is where the pipeline will create all of its output files, also known as the pipeline's working directory. If the provided output directory does not exist, it will be created automatically. Example: --output /data/$USER/modr_out --genome {hg38_41, mm10_M25, mm39_M31} Reference genome. type: string This option defines the reference genome of the samples. modr does comes bundled with pre-built reference files from GENCODE for human and mouse samples. Please select from one of the following options: hg38_41 , mm10_M25 , mm39_M31 . Please note that hg38_41 is a human reference genome, while mm10_M25 and mm39_M31 are two different reference genomes available for mouse. Example: Example: --genome hg38_41 --groups GROUPS Groups file. type: file This tab-delimited (TSV) file is used to collect additional metadata that is required to run the pipeline. This file consists of three columns containing the names of each sample, the path to the sample's fast5 directory, and the name of a group a sample is assoicated with. Each of these fields is required! The first column should contain the base name of a given sample. The base name of a given sample can be determined by removing its file extension from the sample's FastQ file, for example: WT_S4.fastq.gz becomes WT_S4 in the groups file. Here is an example base name of a multiplexed sample. Given: WT_S2_1.fastq.gz , WT_S2_2.fastq.gz , WT_S2_3.fastq.gz The base name would be WT_S2 . The second column should contain the path to the sample's fast5 directory. The fast5 directory contains HDF5 files which couple sequencing information with raw event signal from the ONT sequencer. The raw signal information is used to infer RNA modifcation. As so, the pipeline needs access to both the FastQ files and their fast5 files. The third, and last column, contains group information for each sample. A user can set their own groups. A group can represent anything from a timepoint, to a experimental condition, to a treatment, etc. Please note that groups are composed of alphanumeric characters, cannot startwith a number, and cannot contain any - characters. Groups can contain _ character. Contents of example groups file: WT_S1 .tests/WT_S1/fast5/ T1 WT_S2 .tests/WT_S2/fast5/ T1 WT_S3 .tests/WT_S3/fast5/ T2 WT_S4 .tests/WT_S4/fast5/ T2 WT_S5 .tests/WT_S5/fast5/ T2 Example: Example: --groups .tests/groups.tsv","title":"2.1 Required arguments"},{"location":"usage/run/#22-analysis-options","text":"Each of the following arguments are optional, and do not need to be provided. --contrasts CONTRASTS Contrasts file for Differential Analyses. type: file This tab-delimited (TSV) file is used to setup comparisons between different sets of groups. These comparsions are used to find differential transcript expression (DTE), differential transcript usage (DTU), and differential alternative splicing (AS) events. Please see the --groups option above for more information about how to define groups within a set of samples. The contrasts file consists of two columns containing the names of each group to compare. The names defined in this file must also exist in the groups file. Given the following groups file: WT_S1 .tests/WT_S1/fast5/ T1 WT_S2 .tests/WT_S2/fast5/ T1 WT_S3 .tests/WT_S3/fast5/ T2 WT_S4 .tests/WT_S4/fast5/ T2 WT_S5 .tests/WT_S5/fast5/ T2 Here is an example contrasts file: T2 T1 Please note: the order of the groups defined in the contrasts file will determine how to interpret the direction of the fold-change. As so, if we use the T2 T1 comparison as an example for interpreting DTE results, a positive fold-change for a given transcript would indicate that the T2 samples' expression is higher than the T1 samples' expression. Example: Example: --contrasts .tests/contrasts.tsv --quality-filter QUALITY_FILTER Quality score filter. type: int default: 8 This option filters reads on a minimum average quality score. Any reads with an average minimum quality score less than this threshold will be removed. The default average minimum quality filter is set to 8. Example: --quality-filter 10 --rna-editing {A-I, ...} Type of RNA editing or RNA modifications to identify. type: str default: None RNA editing has been show to affect the function and stability of RNA molecules. This option allow a user to define the type of RNA editing sites to identify. The pipeline can currently identify the following types of RNA editing (more coming soon!): A-I : A common type of RNA editing catalysed by double-stranded RNA (dsRNA)-specific adenosine deaminase (ADAR) enzymes. Example: --rna-editing A-I","title":"2.2 Analysis options"},{"location":"usage/run/#23-orchestration-options","text":"Each of the following arguments are optional, and do not need to be provided. --dry-run Dry run the pipeline. type: boolean flag Displays what steps in the pipeline remain or will be run. Does not execute anything! Example: --dry-run --silent Silence standard output. type: boolean flag Reduces the amount of information directed to standard output when submitting master job to the job scheduler. Only the job id of the master job is returned. Example: --silent --mode {slurm,local} Execution Method. type: string default: slurm Execution Method. Defines the mode or method of execution. Vaild mode options include: slurm or local. slurm The slurm execution method will submit jobs to the SLURM workload manager . It is recommended running modr in this mode as execution will be significantly faster in a distributed environment. This is the default mode of execution. local Local executions will run serially on compute instance. This is useful for testing, debugging, or when a users does not have access to a high performance computing environment. If this option is not provided, it will default to a local execution mode. Example: --mode slurm --job-name JOB_NAME Set the name of the pipeline's master job. type: string default: pl:modr When submitting the pipeline to a job scheduler, like SLURM, this option always you to set the name of the pipeline's master job. By default, the name of the pipeline's master job is set to \"pl:modr\". Example: --job-name pl_id-42 --singularity-cache SINGULARITY_CACHE Overrides the $SINGULARITY_CACHEDIR environment variable. type: path default: --output OUTPUT/.singularity Singularity will cache image layers pulled from remote registries. This ultimately speeds up the process of pull an image from DockerHub if an image layer already exists in the singularity cache directory. By default, the cache is set to the value provided to the --output argument. Please note that this cache cannot be shared across users. Singularity strictly enforces you own the cache directory and will return a non-zero exit code if you do not own the cache directory! See the --sif-cache option to create a shareable resource. Example: --singularity-cache /data/$USER/.singularity --sif-cache SIF_CACHE Path where a local cache of SIFs are stored. type: path Uses a local cache of SIFs on the filesystem. This SIF cache can be shared across users if permissions are set correctly. If a SIF does not exist in the SIF cache, the image will be pulled from Dockerhub and a warning message will be displayed. The modr cache subcommand can be used to create a local SIF cache. Please see modr cache for more information. This command is extremely useful for avoiding DockerHub pull rate limits. It also remove any potential errors that could occur due to network issues or DockerHub being temporarily unavailable. We recommend running modr with this option when ever possible. Example: --singularity-cache /data/$USER/SIFs --threads THREADS Max number of threads for each process. type: int default: 2 Max number of threads for each process. This option is more applicable when running the pipeline with --mode local . It is recommended setting this vaule to the maximum number of CPUs available on the host machine. Example: --threads 12 --tmp-dir TMP_DIR Max number of threads for each process. type: path default: /lscratch/$SLURM_JOBID Path on the file system for writing temporary output files. By default, the temporary directory is set to '/lscratch/$SLURM_JOBID' for backwards compatibility with the NIH's Biowulf cluster; however, if you are running the pipeline on another cluster, this option will need to be specified. Ideally, this path should point to a dedicated location on the filesystem for writing tmp files. On many systems, this location is set to somewhere in /scratch. If you need to inject a variable into this string that should NOT be expanded, please quote this options value in single quotes. Example: --tmp-dir /scratch/$USER/ --resource-bundle RESOURCE_BUNDLE Path to a resource bundle downloaded with the install sub command. type: path The resource bundle contains the set of required reference files for processing any data. The path provided to this option will be the path to the modr directory that was created when running the install sub command. Please see the install sub command for more information about downloading the pipeline's resource bundle. Example: --resource-bundle /data/$USER/refs/modr --use-conda Use Conda/mamba instead of Singularity. type: boolean flag Use Conda/Mamba instead of Singularity. By default, the pipeline uses singularity for handling required software dependencies. This option overrides that behavior, and it will use Conda or mamba instead of Singularity. The use of Singuarity and Conda are mutually exclusive. Please note that conda or mamba must be in your $PATH prior to running the pipeline. Example: --use-conda","title":"2.3 Orchestration options"},{"location":"usage/run/#24-miscellaneous-options","text":"Each of the following arguments are optional, and do not need to be provided. -h, --help Display Help. type: boolean flag Shows command's synopsis, help message, and an example command Example: --help","title":"2.4 Miscellaneous options"},{"location":"usage/run/#3-example","text":"# Step 1.) Grab an interactive node, # do not run on head node! srun -N 1 -n 1 --time = 1 :00:00 --mem = 8gb --cpus-per-task = 2 --pty bash module purge module load singularity snakemake # Step 2A.) Dry-run the pipeline ./modr run --input .tests/*.fastq.gz \\ --output test_01 \\ --genome hg38_41 \\ --groups .tests/groups.tsv \\ --mode slurm \\ --dry-run # Step 2B.) Run the modr pipeline # The slurm mode will submit jobs to # the cluster. It is recommended running # the pipeline in this mode. ./modr run --input .tests/*.fastq.gz \\ --output test_01 \\ --genome hg38_41 \\ --groups .tests/groups.tsv \\ --mode slurm","title":"3. Example"},{"location":"usage/unlock/","text":"modr unlock \u00b6 1. About \u00b6 The modr executable is composed of several inter-related sub commands. Please see modr -h for all available options. This part of the documentation describes options and concepts for modr unlock sub command in more detail. With minimal configuration, the unlock sub command enables you to unlock a pipeline output directory. If the pipeline fails ungracefully, it maybe required to unlock the working directory before proceeding again. Snakemake will inform a user when it maybe necessary to unlock a working directory with an error message stating: Error: Directory cannot be locked . Please verify that the pipeline is not running before running this command. If the pipeline is currently running, the workflow manager will report the working directory is locked. The is the default behavior of snakemake, and it is normal. Do NOT run this command if the pipeline is still running! Please kill the master job and it's child jobs prior to running this command. Unlocking modr pipeline output directory is fast and easy! In its most basic form, modr unlock only has one required input . 2. Synopsis \u00b6 $ ./modr unlock [-h] --output OUTPUT The synopsis for this command shows its parameters and their usage. Optional parameters are shown in square brackets. A user must provide an output directory to unlock via --output argument. After running the unlock sub command, you can resume the build or run pipeline from where it left off by re-running it. Use you can always use the -h option for information on a specific command. 2.1 Required Arguments \u00b6 --output OUTPUT Output directory to unlock. type: path Path to a previous run's output directory. This will remove a lock on the working directory. Please verify that the pipeline is not running before running this command. Example: --output /data/$USER/modr_out 2.2 Options \u00b6 Each of the following arguments are optional and do not need to be provided. -h, --help Display Help. type: boolean Shows command's synopsis, help message, and an example command Example: --help 3. Example \u00b6 # Step 0.) Grab an interactive node (do not run on head node) srun -N 1 -n 1 --time = 12 :00:00 -p interactive --mem = 8gb --cpus-per-task = 4 --pty bash module purge module load singularity snakemake # Step 1.) Unlock a pipeline output directory modr unlock --output /data/ $USER /output","title":"modr unlock"},{"location":"usage/unlock/#modr-unlock","text":"","title":"modr unlock"},{"location":"usage/unlock/#1-about","text":"The modr executable is composed of several inter-related sub commands. Please see modr -h for all available options. This part of the documentation describes options and concepts for modr unlock sub command in more detail. With minimal configuration, the unlock sub command enables you to unlock a pipeline output directory. If the pipeline fails ungracefully, it maybe required to unlock the working directory before proceeding again. Snakemake will inform a user when it maybe necessary to unlock a working directory with an error message stating: Error: Directory cannot be locked . Please verify that the pipeline is not running before running this command. If the pipeline is currently running, the workflow manager will report the working directory is locked. The is the default behavior of snakemake, and it is normal. Do NOT run this command if the pipeline is still running! Please kill the master job and it's child jobs prior to running this command. Unlocking modr pipeline output directory is fast and easy! In its most basic form, modr unlock only has one required input .","title":"1. About"},{"location":"usage/unlock/#2-synopsis","text":"$ ./modr unlock [-h] --output OUTPUT The synopsis for this command shows its parameters and their usage. Optional parameters are shown in square brackets. A user must provide an output directory to unlock via --output argument. After running the unlock sub command, you can resume the build or run pipeline from where it left off by re-running it. Use you can always use the -h option for information on a specific command.","title":"2. Synopsis"},{"location":"usage/unlock/#21-required-arguments","text":"--output OUTPUT Output directory to unlock. type: path Path to a previous run's output directory. This will remove a lock on the working directory. Please verify that the pipeline is not running before running this command. Example: --output /data/$USER/modr_out","title":"2.1 Required Arguments"},{"location":"usage/unlock/#22-options","text":"Each of the following arguments are optional and do not need to be provided. -h, --help Display Help. type: boolean Shows command's synopsis, help message, and an example command Example: --help","title":"2.2 Options"},{"location":"usage/unlock/#3-example","text":"# Step 0.) Grab an interactive node (do not run on head node) srun -N 1 -n 1 --time = 12 :00:00 -p interactive --mem = 8gb --cpus-per-task = 4 --pty bash module purge module load singularity snakemake # Step 1.) Unlock a pipeline output directory modr unlock --output /data/ $USER /output","title":"3. Example"}]}